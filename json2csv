#!/bin/bash

########################
### Define functions ###
########################

log()
{
	echo -e "$*" >&2
}

fail()
{
	log "ERROR: $*"
	exit 1
}

step()
{
	${NO_STEP} && return 0
	len=$(echo "$*" | awk '{print length}')
	log "$(seq -s'#' 0 ${len} | tr -d '[:digit:]')"
	log "$*"
	log "$(seq -s'#' 0 ${len} | tr -d '[:digit:]')"
}

get_attrs()
{
	local attrs=$(echo "${ATTRIBUTE_LIST}" | jq -r ".[] | \"\(.name)\"")
	attrs="${attrs//$'\n'/ }"
	[ -z "${attrs}" ] && fail "No attribute has been defined"
	echo "${attrs}"
}

get_models()
{
	local models=$(echo "${MODEL_LIST}" | jq -r ".[] | \"\(.name)\"")
	models="${models//$'\n'/ }"
	[ -z "${models}" ] && fail "No model has been defined"
	echo "${models}"
}

get_attr_filter()
{
	[ -z "${1}" ] && fail "No argument given to '${FUNCNAME[0]}'"
	local filter=$(echo "${ATTRIBUTE_LIST}" | jq -r ".[] | select(.name==\"${1}\") | \"\(.format)\"")
	[ -z "${filter}" ] && fail "No attribute '${1}' found"
	echo "${filter}"
}

get_attr_format()
{
	[ -z "${1}" ] && fail "No argument given to '${FUNCNAME[0]}'"
	local format=$(echo "${ATTRIBUTE_LIST}" | jq -r ".[] | select(.name==\"${1}\") | \"\(.format)\"")
	[ -z "${format}" ] && fail "No attribute '${1}' found"
	if is_attr_expanded ${1}; then
		echo "\(${format})"
	else
		echo "${format}"
	fi
}

get_model_attrs()
{
	[ -z "${1}" ] && fail "No argument given to '${FUNCNAME[0]}'"
	local attrs=$(echo "${MODEL_LIST}" | jq -r ".[] | select(.name==\"${1}\") | \"\(.attrs)\"")
	attrs="${attrs//$','/ }"
	echo "${attrs}"
}

get_model_format()
{
	[ -z "${1}" ] && fail "No argument given to '${FUNCNAME[0]}'"
	local format=$(echo "${MODEL_LIST}" | jq -r ".[] | select(.name==\"${1}\") | \"\(.attrs)\"")
	[ -z "${format}" ] && fail "No attribute '${1}' found"
	local output_format=
	IFS=','
	for attr in ${format}
	do
		output_format+="\($(get_attr_format ${attr}))${SEP}"
	done
	IFS=' '
	echo "${output_format}"
}

is_attr_expanded()
{
	[ -z "${1}" ] && fail "No argument given '${FUNCNAME[0]}'"
	is_expanded=$(echo "${ATTRIBUTE_LIST}" | jq -r ".[] | select(.name==\"${1}\") | \"\(.expand)\"")
	[ "${is_expanded}" = "yes" ] && return 0
	return 1
}

is_attr_quoted()
{
	[ -z "${1}" ] && fail "No argument given '${FUNCNAME[0]}'"
	is_quoted=$(echo "${ATTRIBUTE_LIST}" | jq -r ".[] | select(.name==\"${1}\") | \"\(.is_quoted)\"")
	[ "${is_quoted}" = "yes" ] && return 0
	return 1
}

is_attr_quotes_replaced()
{
	[ -z "${1}" ] && fail "No argument given '${FUNCNAME[0]}'"
	quotes_replaced=$(echo "${ATTRIBUTE_LIST}" | jq -r ".[] | select(.name==\"${1}\") | \"\(.replace_quotes)\"")
	[ "${quotes_replaced}" = "yes" ] && return 0
	return 1
}

filter()
{
	[ -z "${1}" ] && fail "No filter given to '${FUNCNAME[0]}'"

	local filter=

	if [[ "${1}" =~ ^(.+)=(.+)$ ]];then
		attr=${BASH_REMATCH[1]}
		value=${BASH_REMATCH[2]}
		is_attr_quoted ${attr} && value="\"$value\""
		filter=" | select($(get_attr_filter ${attr})==${value})"
	elif [[ "${1}" =~ ^(.+)\[(.+)\]$ ]]; then
		attr=${BASH_REMATCH[1]}
		value=${BASH_REMATCH[2]}
		is_attr_quoted ${attr} && value="\"$value\""
		filter=" | select($(get_attr_filter ${attr}) | index(${value}))"
	else
		fail "Filter '${1}' has incorrect format"
	fi

	echo ${filter}
}

filter_out()
{
	[ -z "${1}" ] && fail "No filter given to '${FUNCNAME[0]}'"

	local filter=

	if [[ "${1}" =~ ^(.+)=(.+)$ ]];then
		attr=${BASH_REMATCH[1]}
		value=${BASH_REMATCH[2]}
		is_attr_quoted ${attr} && value="\"$value\""
		filter=" | select($(get_attr_filter ${attr})!=${value})"
	elif [[ "${filter}" =~ ^(.+)\[(.+)\]$ ]]; then
		attr=${BASH_REMATCH[1]}
		value=${BASH_REMATCH[2]}
		is_attr_quoted ${attr} && value="\"$value\""
		filter=" | select($(get_attr_filter ${attr}) | index(${value}) | not)"
	else
		fail "Filter '${1}' has incorrect format"
	fi

	echo ${filter}
}

compose_output()
{
	[ -z "${1}" ] && fail "No argument given to '${FUNCNAME[0]}'"

	local attrs=
	local output=

	if ${PREDEFINED_MODEL_USED}; then
		attrs="$(get_model_attrs ${1})"
	elif ${COMPOSED_MODEL_USED}; then
		attrs="${1}"
	fi

	for attr in ${attrs}
	do
		if is_attr_quotes_replaced ${attr}; then
			REPLACE_DOUBLE_QUOTES=true
			output+="\\\"$(get_attr_format ${attr})\\\"${SEP}"
		else
			output+="$(get_attr_format ${attr})${SEP}"
		fi
	done
	echo ${output}
}

########################
### Define variables ###
########################

CONFIG=
CSV_SEPARATOR=";"
INPUT=
OUTPUT=
NO_HEADER=false
FILTER=
IS_FILTER=false
FILTER_OUT=
IS_FILTER_OUT=false
PRINT_ATTRS=false
PRINT_MODELS=false
PREDEFINED_MODEL_USED=false
PREDEFINED_MODEL=
COMPOSED_MODEL_USED=false
COMPOSED_MODEL=
OUTPUT_FORMAT_USED=false
OUTPUT_FORMAT=
SILENT=false
NO_STEP=false
DESCRIPTION="$(step '### Description ###' 2>&1)\n\
Convert Gitlab JSON issues to a CSV file using 'jq'.\n\
\tIssues can be filtered either by using predefined filters or by composing it with available options.\n\
\tThe output pattern can also be chosen from the predefined ones or composed with options.\n\
\n\
\tNOTE : 'jq' Debian package has to be installed.\n"
MODEL_DESC="$(step '### Output format ###' 2>&1)\n\
Composing models with predefined attributes: (--model <MODEL>)\n\
\n\
\tOutput format follows the order of given attributes and uses the CSV separator.\n\
\n\
\t - assigne                   The person who has been assigned to the issue.\n\
\t - author                    The issue's author.\n\
\t - creation-date             Issue's creation date.\n\
\t - description               Issue's description.\n\
\t - due-date                  Issue's end date.\n\
\t - id                        Issue's id.\n\
\t - labels                    Issue's labels.\n\
\t - milestone                 Issue's milestone.\n\
\t - state                     Issue's current state.\n\
\t - title                     Issue's title.\n\
\n\
\tMODEL format: --model attr1,attr2,attr3
\n\
Predefined models: (--model-MODELNAME)\n\
\n\
\tPredefined models use CSV separator between attributes.\n\
\n\
\t --model-title               Print only title
\t --model-id-title            Print id and title
\t --model-id-title-labels     Print id, title and labels
\t --model-title-desc          Print title and description
\t --model-id-title-desc       Print id, title and description
\t --model-all                 Print all attributes in the following order: id, title, state, milestone, labels, assigne, author, creation-date and description
\n\
With given format: (--format <FORMAT>)\n\
\n\
\tSelected attributes are printed following the given format, the CSV separator is not used.
\n\
\tNOTE : Remember that the given format will be used as a jq output format, if it doesn't match a valid jq syntax the script will fail.\n\
\t       Refer to jq documentation and/or inspire from default models in order to compose a customized output format.\n\
"
FILTER_DESC="$(step '### Filters ###' 2>&1)\n\
Filters' attributes shall be choosen from predefined attributes.\n\
\n\
Filter format:
\tattribute=value   ==>  Attribute is equal to value\n\
\tattribute[value]  ==>  Attribute contains value (for lists)\n\
"
CONFIGURATION_DESC="$(step '### Custom configuration ###' 2>&1)\n\
A custom configuration can be loaded in order to define your own attributes and your own output models.\n\
\n\
Custom attributes:\n\
\tAttributes are defined as JSON table stored into ATTRIBUTE_LIST variable\n\
\t\tTo define a custom attribute use the following syntax : {\"name\":\"<name>\",   \"format\":\"<format>\",   \"expand\":\"<yes|no>\", \"is_quoted\":\"<yes|no>\",  \"replace_quotes\":\"<yes|no>\"}\n\
\t\t\t - name: The attribute name\n\
\t\t\t - format: The jq attribute format\n\
\t\t\t - expand: Weither the attribute shall be expanded by jq or used literally\n\
\t\t\t - is_quoted: Weither the attribute shall be surrounded with quotes for jq filtering or not\n\
\t\t\t - replace_quotes: Weither double quotes (\") shall be replaced by simple quotes (') or not\n\
\n\
\tNOTE : Remember that attribute format is a jq format, if it doesn't match a valid jq syntax the script will fail.\n\
\t       Refer to jq documentation and/or inspire from defaults ones in order to compose custom attributes.\n\
\n\
Custom models:\n\
\tModels are defined as JSON table stored into MODEL_LIST variable\n\
\t\tTo define a custom model use the following syntax : {\"name\":\"<name>\", \"attrs\":\"<attribute_list>\"}\n\
\t\t\t - name: The model name\n\
\t\t\t - attrs: Attribute list coma-separated\n\
\n\
\tNOTE : Remember that model format is composed with attributes format, if it doesn't match a valid jq syntax the script will fail.\n\
\t       Refer to jq documentation and/or inspire from defaults ones in order to compose custom models.\n\
"
USAGE="$(step '### Usage ###' 2>&1)\n\
Usage: ${0} [-h|--help] [OPTIONS]\n\
Options:\n\
\t-h|--help                       : Print this help.\n\
\t-c|--config-file                : Load models and attributes from given configuration file.\n\
\t-i|--input                      : Input JSON file. If not specified, JSON is read from stdin.\n\
\t-o|--output                     : Output CSV file. If not specified, CSV is printed on stdout.\n\
\t-s|--csv-separator              : The character separator to be used in the CSV output file. If not specified, ';' is used.\n\
\t-S|--silent                     : Script will not output anything except CSV.\n\
\t--no-header                     : Do not print CSV header.\n\
\t--no-step                       : Don't print script steps but keep messages. \n \
\t--filter                        : Keep results matching filter.\n\
\t--filter-out                    : Remove results matching filter.\n\
\t--model                         : Compose output format using predefined attributes.\n\
\t--format                        : Attributes are printed following the given format.\n\
\t--print-attributes              : Print available attributes for printing and filtering.\n\
\t--print-models                  : Print available models for printing.\n\
${MODEL_DESC}
${FILTER_DESC}
${CONFIGURATION_DESC}"

DEPENDENCIES="jq"

#######################
### Check arguments ###
#######################
while [ ${#} -ne 0 ]; do
	case "${1}" in
		-h|--help)                  log "${DESCRIPTION}${USAGE}"; exit 0;;
		-c|--config-file)           shift; CONFIG=${1};;
		-i|--input)                 shift; INPUT=${1};;
		-o|--output)                shift; OUTPUT=${1};;
		-s|--csv-separator)         shift; CSV_SEPARATOR=${1};;
		-S|--silent)                SILENT=true;;
		--no-header)                NO_HEADER=true;;
		--no-step)                  NO_STEP=true;;
		--filter)                   shift; IS_FILTER=true; FILTER+=${1},;;
		--filter-out)               shift; IS_FILTER_OUT=true; FILTER_OUT+=${1},;;
		--print-attributes)         PRINT_ATTRS=true;;
		--print-models)             PRINT_MODELS=true;;
		--model)                    shift; COMPOSED_MODEL_USED=true; [ -z "${COMPOSED_MODEL}" ] && COMPOSED_MODEL=${1};;
		--model-*)                  PREDEFINED_MODEL_USED=true; [ -z "${PREDEFINED_MODEL}" ] && PREDEFINED_MODEL=${1};;
		--format)                   shift; OUTPUT_FORMAT_USED=true;  [ -z "${OUTPUT_FORMAT}" ] && OUTPUT_FORMAT=${1};;
		*)                          log "${USAGE}"; exit 1;;
	esac
	shift
done

# Handle I/O redirections
[ -z "${INPUT}" ] ||
{
	[ -f "${INPUT}" ] || fail "Error : Input file '${INPUT}' doesn't exist"
	exec < ${INPUT}
}
[ -z "${OUTPUT}" ] ||
{
	[[ "${OUTPUT}" =~ ^.+\.csv$ ]] || OUTPUT=${OUTPUT}.csv
	exec > ${OUTPUT}
}
${SILENT} && exec 2> /dev/null

# Check CSV separator
[ -z "${CSV_SEPARATOR}" ] && fail "Error : CSV separator undefined"

# Check filters
${IS_FILTER} && [ -z "${FILTER}" ] && fail "Error : No filter given\n${FILTER_DESC}"
${IS_FILTER_OUT} && [ -z "${FILTER_OUT}" ] && fail "Error : No filter given\n${FILTER_DESC}"
IFS=','
for filter in ${FILTER}${FILTER_OUT}
do
	[[ ! "${filter}" =~ ^.+=.+$ ]] &&\
	[[ ! "${filter}" =~ ^.+\[.+\]$ ]] &&\
	fail "Error : Incorrect filter pattern '${filter}'\n${FILTER_DESC}"
done
IFS=' '

####################################
### Declare attributes and models ###
#####################################
SEP=${CSV_SEPARATOR}

# Declare attributes
ATTRIBUTE_LIST=$(cat <<EOF
[
    {"name":"assigne",        "format":".assignee.name",    "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"no"  },
    {"name":"author",         "format":".author.name",      "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"no"  },
    {"name":"creation-date",  "format":".created_at",       "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"no"  },
    {"name":"description",    "format":".description",      "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"yes" },
    {"name":"due-date",       "format":".due_date",         "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"no"  },
    {"name":"id",             "format":".iid",              "expand":"yes",  "is_quoted":"no",   "replace_quotes":"no"  },
    {"name":"labels",         "format":".labels",           "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"no"  },
    {"name":"milestone",      "format":".milestone.title",  "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"no"  },
    {"name":"state",          "format":".state",            "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"no"  },
    {"name":"title",          "format":".title",            "expand":"yes",  "is_quoted":"yes",  "replace_quotes":"no"  }
]
EOF
)

# Declare models
MODEL_LIST=$(cat <<EOF
[
    {"name":"title",            "attrs":"title"},
    {"name":"id-title",         "attrs":"id,title"},
    {"name":"id-title-labels",  "attrs":"id,title,labels"},
    {"name":"title-desc",       "attrs":"title,description"},
    {"name":"id-title-desc",    "attrs":"id,title,description"},
    {"name":"all",              "attrs":"id,title,state,assigne,author,creation-date,description"}
]
EOF
)

[ -z ${CONFIG} ] ||
{
	[ -f ${CONFIG} ] || fail "Error : Configuration file '${CONFIG}' doesn't exist"
	source ${CONFIG}
}

${PRINT_ATTRS} &&
{
	echo -en "Predefined attributes:\n\t"
	for attr in $(get_attrs)
	do
		echo -en "'${attr}' "
	done
	echo
}
${PRINT_MODELS} &&
{
	echo -en "Predefined models:\n\t"
	for model in $(get_models)
	do
		echo -en "'${model}' "
	done
	echo
}
${PRINT_ATTRS} || ${PRINT_MODELS} && exit 0

##########################
### Check dependencies ###
##########################
step "### Check dependencies ###"
dpkg -s ${DEPENDENCIES} > /dev/null 2>&1 ||
{
	log "Missing following packages :"
	log -n "    "
	for dep in ${DEPENDENCIES}; do
		dpkg -s "${dep}" > /dev/null 2>&1 || log -n "${dep} "
	done
	log
	log "Install them running 'apt-get install' and retry"
	exit 1
}

#############################
### Prepare output format ###
#############################
step "### Compose output format ###"
JQ_OUTPUT=

# Use predefined model
if ${PREDEFINED_MODEL_USED}; then
	predefined_model_found=false
	for model in $(get_models)
	do
		[ "--model-${model}" = "${PREDEFINED_MODEL}" ] && predefined_model_found=true
	done
	${predefined_model_found} || fail "Error : Unknown model '${PREDEFINED_MODEL}'"
	JQ_OUTPUT=$(compose_output $(sed 's/--model-//' <<< ${PREDEFINED_MODEL}))
# Use composed model
elif ${COMPOSED_MODEL_USED}; then
	JQ_OUTPUT=$(compose_output "${COMPOSED_MODEL//,/ }")
# Use given output format
elif ${OUTPUT_FORMAT_USED}; then
	JQ_OUTPUT+=${OUTPUT_FORMAT}
# Default format
else
	JQ_OUTPUT=$(compose_output all)
fi
[ -z "${JQ_OUTPUT}" ] && fail "Error : Unable to compose jq filter"

#########################
### Prepare jq filter ###
#########################
step "### Compose jq filter ###"
JQ_FILTER=

IFS=','
for filter in ${FILTER}
do
	JQ_FILTER+=$(filter ${filter})
done
for filter in ${FILTER_OUT}
do
	JQ_FILTER+=$(filter_out ${filter})
done
IFS=' '

###########################
### Convert JSON to CSV ###
###########################
step "### Convert JSON to CSV ###"

if ${REMOVE_DOUBLE_QUOTES};then
	jq -r ".[] ${JQ_FILTER} | \"${JQ_OUTPUT}\"" | sed "s/\"/'/g" | sed "s/';/\";/g" | sed "s/;'/;\"/g" || fail "Error : Unable to compose a valid jq filter"
else
	jq -r ".[] ${JQ_FILTER} | \"${JQ_OUTPUT}\"" || fail "Error : Unable to compose a valid jq filter"
fi

exit 0





