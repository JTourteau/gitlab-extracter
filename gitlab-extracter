#!/bin/bash

########################
### Define functions ###
########################

log()
{
	echo -e "$*" >&2
}

fail()
{
	log "ERROR: $*"
	exit 1
}

step()
{
	${NO_STEP} && return 0
	len=$(echo "$*" | awk '{print length}')
	log "$(seq -s'#' 0 ${len} | tr -d '[:digit:]')"
	log "$*"
	log "$(seq -s'#' 0 ${len} | tr -d '[:digit:]')"
}

########################
### Define variables ###
########################

AUTH=
BROWSE=false
ID=
KEY=
OUTPUT=
URL=https://gitlab.com
NO_PROXY=false
CSV_FILE=
BROWSE_FILE=
SILENT=false
NO_STEP=false
PARAMS="?per_page=100&page=1"
DESCRIPTION="Retrieve gitlab project's content as JSON file. \n \
             	The content is either stored in a file or printed on standard output. \n \
             	The JSON content can also be oppened into a web browser.
             	\n \
             	NOTE : 'curl' package has to be installed."
GITLAB_API=api/v4/projects
USAGE="Usage: ${0} --id PROJECT_ID [-h|--help] [-a|--auth KEY] [-b|--browse] [-o|--output OUTPUT.json] [-S|--silent] [-u|--url URL] [--no-proxy]\n \
\t\t-h|--help                       : Print this help.\n \
\t\t-a|--auth                       : Authentication key \n \
\t\t-b|--browse                     : Open JSON content with default web browser. \n \
\t\t-i|--id                         : Gitlab project id. \n \
\t\t-o|--output                     : Save JSON content into given file. \n \
\t\t-S|--silent                     : Script will not output anything except JSON. \n \
\t\t-u|--url                        : Gitlab server URL ('${URL}' as default value).\n \
\t\t--no-proxy                      : Don't use proxies, even if the appropriate *_proxy environment variable is defined.\n \
\t\t--no-step                       : Don't print script steps but keep messages. \n \
\n"

DEPENDENCIES="curl"

#######################
### Check arguments ###
#######################
[ ${#} -gt 0 ] || { printf "${USAGE}"; exit 1; }

while [ ${#} -ne 0 ]; do
	case "${1}" in
		-h|--help)                  log "${USAGE}${DESCRIPTION}"; exit 0;;
		-a|--auth)                  shift; KEY=${1};;
		-b|--browse)                BROWSE=true;;
		-i|--id)                    shift; ID=${1};;
		-o|--output)                shift; OUTPUT=${1};;
		-S|--silent)                SILENT=true;;
		-u|--url)                   shift; URL=${1};;
		--no-proxy)                 NO_PROXY=true;;
		--no-step)                  NO_STEP=true;;
		*)                          log "${USAGE}"; exit 1;;
	esac
	shift
done

[ -z "${ID}" ] && fail "You shall specify gitlab project id."
[ -z "${KEY}" ] || AUTH="&private_token=${KEY}"

${NO_PROXY} && { log "Proxies are disabled"; unset {http,https,HTTP,HTTPS,no,NO,all,ALL}_{proxy,PROXY}; }
${SILENT} && exec 2> /dev/null

[ -z "${OUTPUT}" ] ||
{
	[[ "${OUTPUT}" =~ ^.+\.json$ ]] || OUTPUT=${OUTPUT}.json
	exec > ${OUTPUT}
}

##########################
### Check dependencies ###
##########################
step "### Check dependencies ###"
dpkg -s ${DEPENDENCIES} > /dev/null 2>&1 ||
{
	log "Missing following packages :"
	log -n "    "
	for dep in ${DEPENDENCIES}; do
		dpkg -s "${dep}" > /dev/null 2>&1 || log -n "${dep} "
	done
	log
	log "Install them running 'apt-get install' and retry"
	exit 1
}

###################################
### Check that URL is reachable ###
###################################
step "### Check that ${URL} is reachable ###"
ping -c1 -W 5 $(sed 's:^.*\://\(.*$\):\1:' <<< ${URL}) > /dev/null 2>&1 || fail "Error : ${URL} is not reachable"

########################
### Retrieve content ###
########################
step "### Retrieve project's issues ###"
CONTENT_FILE=$(mktemp /tmp/gitlab-extracter.XXXXXX.json)
HEADER_FILE=$(mktemp /tmp/gitlab-extracter.XXXXXX.header)

http_params="?per_page=1&page=1${AUTH}"
curl -s -D ${HEADER_FILE} ${URL}/${GITLAB_API}/${ID}/issues${http_params} >> /dev/null

entry_num=$(grep X-Total: ${HEADER_FILE} | grep -oE '[0-9]+')
[ -z ${entry_num} ] && fail "No issue to retrieve"

log "Retrieving ${entry_num} entries"

if [ "${entry_num}" -ge 100 ]; then
	per_page=100
else
	per_page=1
fi
page=1

while [ ! -z "${page}" ]
do
	http_params="?per_page=${per_page}&page=${page}${AUTH}"
	curl -s -D ${HEADER_FILE} ${URL}/${GITLAB_API}/${ID}/issues${http_params} >> ${CONTENT_FILE}
	http_return_code=$(head -n 1 ${HEADER_FILE} | awk '{print $2}')
	grep -E '2[0-9]{2}' > /dev/null <<< ${http_return_code} || { cat ${HEADER_FILE}; fail "Error : Server returned HTTP status code ${http_return_code}"; }

	percent=$((100*${page}*${per_page}/${entry_num}))
	echo -ne "[$(seq -s'#' 0 ${percent} | tr -d '[:digit:]')$(seq -s'.' 0 $((100-${percent})) | tr -d '[:digit:]')](${percent}%)\r" >&2

	page=$(grep X-Next-Page: ${HEADER_FILE} | grep -oE '[0-9]+')
done

echo >&2

#####################
### Print content ###
#####################
step "### JSON content ###"
[ -z "${OUTPUT}" ] || log "Content saved to '${OUTPUT}'"
cat ${CONTENT_FILE}

######################
### Browse content ###
######################
${BROWSE} && { sensible-browser ${CONTENT_FILE} || fail "Error : Unable to open file with default web browser"; }

exit 0






